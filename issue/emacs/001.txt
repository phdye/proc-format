Script started on 2025-08-08 06:25:04-04:00 [COMMAND="set -x && make e-eval" TERM="screen.xterm-256color" TTY="/dev/pty11" COLUMNS="121" LINES="40"]
+ make e-eval
emacs --batch -Q -l exec-sql-parser.el --eval "(exec-sql-parser-parse \"EXEC SQL\nSELECT * FROM t\")"
Error: error ("Unterminated EXEC SQL STATEMENT-Multi-Line")
  signal(error ("Unterminated EXEC SQL STATEMENT-Multi-Line"))
  error("Unterminated EXEC SQL %s" "STATEMENT-Multi-Line")
  (progn (error "Unterminated EXEC SQL %s" current-construct))
  (if inside (progn (error "Unterminated EXEC SQL %s" current-construct)))
  (let ((line (car tail))) (let ((stripped (string-trim line))) (if inside (progn (setq current-block (cons line current-block)) (if (and (plist-get current-handler :end-pattern) (string-match-p (plist-get current-handler :end-pattern) stripped)) (progn (setq captured (cons (funcall (plist-get current-handler :action) (nreverse current-block)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (progn (setq marker-counter (1+ marker-counter)) (setq inside nil) (setq current-block nil) (setq current-handler nil) (setq current-construct nil))))) (let ((matched nil)) (let ((tail exec-sql-parser-registry)) (while tail (let ((entry (car tail))) (let ((construct (car entry)) (details (cdr entry))) (if (and (not matched) (string-match-p (plist-get details :pattern) stripped)) (progn (setq matched t) (if (plist-get details :end-pattern) (progn (setq inside t) (setq current-block (list line)) (setq current-handler details) (setq current-construct construct)) (setq captured (cons (funcall (plist-get details :action) (list line)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (setq marker-counter (1+ marker-counter)))))) (setq tail (cdr tail))))) (if matched nil (setq output (cons line output)))))) (if inside (progn (error "Unterminated EXEC SQL %s" current-construct))) (list (nreverse output) (nreverse captured)) (setq tail (cdr tail)))
  (while tail (let ((line (car tail))) (let ((stripped (string-trim line))) (if inside (progn (setq current-block (cons line current-block)) (if (and (plist-get current-handler :end-pattern) (string-match-p (plist-get current-handler :end-pattern) stripped)) (progn (setq captured (cons (funcall (plist-get current-handler :action) (nreverse current-block)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (progn (setq marker-counter (1+ marker-counter)) (setq inside nil) (setq current-block nil) (setq current-handler nil) (setq current-construct nil))))) (let ((matched nil)) (let ((tail exec-sql-parser-registry)) (while tail (let ((entry (car tail))) (let ((construct (car entry)) (details (cdr entry))) (if (and (not matched) (string-match-p (plist-get details :pattern) stripped)) (progn (setq matched t) (if (plist-get details :end-pattern) (progn (setq inside t) (setq current-block (list line)) (setq current-handler details) (setq current-construct construct)) (setq captured (cons (funcall (plist-get details :action) (list line)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (setq marker-counter (1+ marker-counter)))))) (setq tail (cdr tail))))) (if matched nil (setq output (cons line output)))))) (if inside (progn (error "Unterminated EXEC SQL %s" current-construct))) (list (nreverse output) (nreverse captured)) (setq tail (cdr tail))))
  (let ((tail lines)) (while tail (let ((line (car tail))) (let ((stripped (string-trim line))) (if inside (progn (setq current-block (cons line current-block)) (if (and (plist-get current-handler :end-pattern) (string-match-p (plist-get current-handler :end-pattern) stripped)) (progn (setq captured (cons (funcall (plist-get current-handler :action) (nreverse current-block)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (progn (setq marker-counter (1+ marker-counter)) (setq inside nil) (setq current-block nil) (setq current-handler nil) (setq current-construct nil))))) (let ((matched nil)) (let ((tail exec-sql-parser-registry)) (while tail (let ((entry (car tail))) (let ((construct (car entry)) (details (cdr entry))) (if (and (not matched) (string-match-p (plist-get details :pattern) stripped)) (progn (setq matched t) (if (plist-get details :end-pattern) (progn (setq inside t) (setq current-block (list line)) (setq current-handler details) (setq current-construct construct)) (setq captured (cons (funcall (plist-get details :action) (list line)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (setq marker-counter (1+ marker-counter)))))) (setq tail (cdr tail))))) (if matched nil (setq output (cons line output)))))) (if inside (progn (error "Unterminated EXEC SQL %s" current-construct))) (list (nreverse output) (nreverse captured)) (setq tail (cdr tail)))))
  (let* ((text (if exec-sql-parser-ignore-comments (exec-sql-parser--strip-comments content) content)) (lines (split-string text "\n")) (captured 'nil) (output 'nil) (inside nil) (current-block nil) (current-handler nil) (current-construct nil) (marker-counter 1)) (let ((tail lines)) (while tail (let ((line (car tail))) (let ((stripped (string-trim line))) (if inside (progn (setq current-block (cons line current-block)) (if (and (plist-get current-handler :end-pattern) (string-match-p (plist-get current-handler :end-pattern) stripped)) (progn (setq captured (cons (funcall (plist-get current-handler :action) (nreverse current-block)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (progn (setq marker-counter (1+ marker-counter)) (setq inside nil) (setq current-block nil) (setq current-handler nil) (setq current-construct nil))))) (let ((matched nil)) (let ((tail exec-sql-parser-registry)) (while tail (let ((entry (car tail))) (let ((construct (car entry)) (details (cdr entry))) (if (and (not matched) (string-match-p (plist-get details :pattern) stripped)) (progn (setq matched t) (if (plist-get details :end-pattern) (progn (setq inside t) (setq current-block (list line)) (setq current-handler details) (setq current-construct construct)) (setq captured (cons (funcall (plist-get details :action) (list line)) captured)) (setq output (cons (exec-sql-parser--marker marker-counter) output)) (setq marker-counter (1+ marker-counter)))))) (setq tail (cdr tail))))) (if matched nil (setq output (cons line output)))))) (if inside (progn (error "Unterminated EXEC SQL %s" current-construct))) (list (nreverse output) (nreverse captured)) (setq tail (cdr tail))))))
  exec-sql-parser-parse("EXEC SQL\nSELECT * FROM t")
  eval((exec-sql-parser-parse "EXEC SQL\nSELECT * FROM t") t)
  command-line-1(("-l" "exec-sql-parser.el" "--eval" "(exec-sql-parser-parse \"EXEC SQL\\nSELECT * FROM t\")"))
  command-line()
  normal-top-level()
Unterminated EXEC SQL STATEMENT-Multi-Line
make: *** [Makefile:8: e-eval] Error 255
Script done on 2025-08-08 06:25:04-04:00 [COMMAND_EXIT_CODE="2"]

