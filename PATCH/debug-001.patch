diff --git a/get-exec-types.sh b/get-exec-types.sh
new file mode 100644
index 0000000..ea91eff
--- /dev/null
+++ b/get-exec-types.sh
@@ -0,0 +1,21 @@
+#!/bin/bash
+
+read -r -d '' filter <<__END__
+	s/^\s*//g;
+	s/\s\s*/ /g;
+	s/ OPEN .*/ OPEN csr/g;
+	s/ FETCH .*/ FETCH csr/g;
+	s/ CLOSE .*/ CLOSE csr/g;
+	s/ \(WHENEVER NOT FOUND DO\) .*/ \1 .../g;
+	s/ \(WHENEVER SQLERROR DO\) .*/ \1 .../g;
+        s/ AT [_:a-zA-Z0-9]* COMMIT.*/ AT <db> COMMIT/g;
+        s/ AT [_:a-zA-Z0-9]* DECLARE [_:a-zA-Z0-9]* CURSOR FOR.*/ AT <db> DECLARE <csr> CURSOR FOR/g;
+__END__
+
+# echo "${filter}"
+
+filter=$(echo -n "${filter}" | /bin/tr -d '\t\n')
+
+# echo "$filter"
+
+grep EXEC "$@" | sed -e "${filter}" | sort -u
diff --git a/src/proc_format/__main__.py b/src/proc_format/__main__.py
index ffb856a..35ae665 100644
--- a/src/proc_format/__main__.py
+++ b/src/proc_format/__main__.py
@@ -12,7 +12,7 @@ def main():
     args = parser.parse_args()
 
     if not os.path.exists(args.input_file):
-        print(f"Error: Input file does not exist: {args.input_file}")
+        print("Error: Input file does not exist: {}" % (args.input_file))
         return
 
     process_file(args.input_file, args.output_file, clang_format_path=args.clang_format)
diff --git a/src/proc_format/core.py b/src/proc_format/core.py
index 96f65ea..5579f30 100644
--- a/src/proc_format/core.py
+++ b/src/proc_format/core.py
@@ -2,6 +2,7 @@ import os
 import re
 import subprocess
 import logging
+import shutil
 
 from .registry import EXEC_SQL_REGISTRY
 
@@ -30,36 +31,59 @@ def capture_exec_sql_blocks(lines):
     inside_block = False
     current_block = []
     current_handler = None
+    current_construct = None
+    current_pattern = None
     marker_counter = 1  # Sequential counter for unique markers
 
+    debug = "debug/sql"
+    shutil.rmtree(debug, ignore_errors=True)
+    os.mkdir(debug)
+
     for line_number, line in enumerate(lines, 1):
+        stripped_line = line.strip()
         if inside_block:
-            stripped_line = line.strip()
             current_block.append(line)  # Add the line to the current block
+            # TODO: should check END pattern but is often fails
             if ';' in stripped_line:
                 # Block has ended; replace it with a marker
                 marker = get_marker(marker_counter)
                 output_lines.append(marker)
                 captured_blocks.append(current_handler["action"](current_block))
+                with open("{}/{}".format(debug, marker_counter), "w") as f:
+                    f.write(("Construct:  '{}'\n".format(construct))
+                           +("Pattern:    '{}'\n".format(details["pattern"]))
+                            +("Stripped:  '{}'\n".format(current_stripped_line))
+                           +("\n".join(current_block)+"\n\n"))
                 marker_counter += 1
                 inside_block = False
                 current_block = []  # Reset the block
                 current_handler = None
+                current_construct = None
+                current_pattern = None
+                current_stripped_line = None
         else:
             for construct, details in EXEC_SQL_REGISTRY.items():
-                if re.match(details["pattern"], line.strip()):
+                if re.match(details["pattern"], stripped_line):
                     if "end_pattern" in details:
                         # Multi-line block detected
                         inside_block = True
                         current_block = [line]
                         current_handler = details
+                        current_construct = construct
+                        current_pattern = details["pattern"]
+                        current_stripped_line = stripped_line
                     else:
                         # Single-line match
                         captured_blocks.append(details["action"]([line]))
+                        with open("{}/{}".format(debug, marker_counter), "w") as f:
+                            f.write(("Construct:  '{}'\n".format(construct))
+                                   +("Pattern:    '{}'\n".format(details["pattern"]))
+                                   +("Stripped:   '{}'\n".format(stripped_line))
+                                   +(line)+"\n\n")
                         marker = get_marker(marker_counter)
-                        if 'BEGIN' in construct:
+                        if construct == "DECLARE SECTION - BEGIN":
                             marker = '{{ {0}'.format(marker)
-                        if 'END' in construct:
+                        if construct == "DECLARE SECTION - END":
                             marker = '}} {0}'.format(marker)
                         output_lines.append(marker)
                         marker_counter += 1
@@ -86,7 +110,19 @@ def restore_exec_sql_blocks(content, exec_sql_segments):
                 marker_number = int(match.group(2))
                 if marker_number != expected_marker:
                     raise ValueError("Marker out of sequence: expected {0}, found {1}".format(expected_marker, marker_number))
-                restored_lines.extend(exec_sql_segments[marker_number - 1])
+                # get the block, split it on newline
+                lines = exec_sql_segments[marker_number - 1]
+                # Align EXEC SQL with C statements
+                indent = len(line) - len(line.lstrip())
+                first = lines.pop(0)
+                restored_lines.append(" " * indent + first.lstrip())
+                if len(lines) > 0:
+                    prior_indent = len(first) - len(first.lstrip())
+                    delta = indent - prior_indent
+                    (more, less) = (0, delta) if delta < 0 else (delta, 0)
+                    for line in lines:
+                        # this_indent = len(line) - len(line.lstrip()) + delta
+                        restored_lines.append(" " * more + line[-less:])
                 expected_marker += 1
             except (IndexError, ValueError) as e:
                 raise ValueError("Invalid or missing marker: {0}, Error: {1}".format(line, e))
@@ -102,7 +138,8 @@ def format_with_clang(content, clang_format_path="clang-format"):
     """Format content using clang-format."""
     with open("debug/f-before.c", "w") as f:
         f.write(content)
-    process = subprocess.Popen([clang_format_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+    # text=True
+    process = subprocess.Popen([clang_format_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
     output, error = process.communicate(input=content)
     if process.returncode != 0:
         raise RuntimeError("Clang-format failed: {0}".format(error))
diff --git a/src/proc_format/registry.py b/src/proc_format/registry.py
index 8ccfdcd..895f1cc 100644
--- a/src/proc_format/registry.py
+++ b/src/proc_format/registry.py
@@ -1,70 +1,98 @@
 # --- Registry for Modular EXEC SQL Handling ---
+
+# Since we are not formating the EXEC SQL lines, simply
+# maintain the original content and indent style offset only
+# to align 'EXEC SQL' with statements the same block.
+#
+# When we start formatting EXEC SQL lines, we will strip() them:
+#    "action": lambda lines: [lines[0].strip()]
+#
+
+import re
+
+re_EXEC_SQL  = re.compile(r'EXEC\s+SQL\b(\s*(.*))?')
+re_DECLARE   = re.compile(r'\s*(BEGIN|END)\s+DECLARE\s+SECTION\s*[;]')
+re_INDENT    = re.compile(r'^(\s*)(.*)')
+
+# Regex patterns for SQL Cursor Management
+re_DECLARE_CURSOR = re.compile(r'EXEC\s+SQL\s+DECLARE\s+\w+\s+CURSOR\s+FOR\b')
+re_OPEN_CURSOR = re.compile(r'EXEC\s+SQL\s+OPEN\s+\w+\b')
+re_FETCH_CURSOR = re.compile(r'EXEC\s+SQL\s+FETCH\s+\w+\b')
+re_CLOSE_CURSOR = re.compile(r'EXEC\s+SQL\s+CLOSE\s+\w+\b')
+
 EXEC_SQL_REGISTRY = {
     # BEGIN and END DECLARE SECTION
     "DECLARE SECTION - BEGIN": {
-        "pattern": r"EXEC SQL BEGIN DECLARE SECTION;",
-        "action": lambda lines: [lines[0].strip()]  # Replace only BEGIN line
+        "pattern": r"EXEC\s+SQL\s+BEGIN\s+DECLARE\s+SECTION\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
     "DECLARE SECTION - END": {
-        "pattern": r"EXEC SQL END DECLARE SECTION;",
-        "action": lambda lines: [lines[0].strip()]  # Replace only END line
+        "pattern": r"EXEC\s+SQL\s+END\s+DECLARE\s+SECTION\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # Cursor Declaration
     "CURSOR DECLARATION": {
-        "pattern": r"EXEC SQL DECLARE \w+ CURSOR FOR",
+        "pattern": r"EXEC\s+SQL\s+DECLARE\s+\w+\s+CURSOR\s+FOR\b",
         "end_pattern": r";",  # Multi-line ending with semicolon
         "action": lambda lines: lines  # Maintain original content
     },
-
+    # Fetch Cursor
+    "FETCH CURSOR": {
+        "pattern": r"EXEC\s+SQL\s+FETCH\s+\w+\s*;",
+        "action": lambda lines: lines  # Maintain original content
+    },
     # Close Cursor
     "CLOSE CURSOR": {
-        "pattern": r"EXEC SQL CLOSE \w+;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+CLOSE\s+\w+\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # Commit Work
     "COMMIT WORK RELEASE": {
-        "pattern": r"EXEC SQL COMMIT WORK RELEASE;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+COMMIT\s+WORK\s+RELEASE\s*;",
+        "action": lambda lines: lines  # Maintain original c*ntent
     },
 
     # Connect Statement
     "CONNECT": {
-        "pattern": r"EXEC SQL CONNECT \S+;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+CONNECT\s+\S+\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
     "CONNECT WITH DB": {
-        "pattern": r"EXEC SQL CONNECT \S+ AT \S+;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
-    },
-
-    # Fetch Cursor
-    "FETCH CURSOR": {
-        "pattern": r"EXEC SQL FETCH \w+;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+CONNECT\s+\S+\s+AT\s+(.*\S)\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # Include SQLCA
     "INCLUDE SQLCA": {
-        "pattern": r"EXEC SQL INCLUDE SQLCA;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+INCLUDE\s+SQLCA\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # Open Cursor
     "OPEN CURSOR": {
-        "pattern": r"EXEC SQL OPEN \w+;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+OPEN\s+\w+\s*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # WHENEVER Statements
     "WHENEVER SQLERROR": {
-        "pattern": r"EXEC SQL WHENEVER SQLERROR .*;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"EXEC\s+SQL\s+WHENEVER\s+SQLERROR\s+(.*);",
+        "action": lambda lines: lines  # Maintain original content
     },
-    "WHENEVER NOT FOUND": {
-        "pattern": r"EXEC SQL WHENEVER NOT FOUND .*;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+
+    "WHENEVER NOT FOUND [1]": {
+        # "pattern": r"EXEC\s\s*SQL\s\s*WHENEVER\s\s*NOT\s\s*FOUND\s+(.*);",
+        "pattern": r"\s*EXEC SQL WHENEVER NOT FOUND\b.*;",
+        "action": lambda lines: lines  # Maintain original content
+    },
+
+    # WERID TODO: A second copy sometimes hits when the first one doesn't ?
+    "WHENEVER NOT FOUND [2]": {
+        # "pattern": r"EXEC\s\s*SQL\s\s*WHENEVER\s\s*NOT\s\s*FOUND\s+(.*);",
+        "pattern": r"\s*EXEC SQL WHENEVER NOT FOUND\b.*;",
+        "action": lambda lines: lines  # Maintain original content
     },
 
     # Multi-line Statements
@@ -74,9 +102,14 @@ EXEC_SQL_REGISTRY = {
         "action": lambda lines: lines  # Maintain original content
     },
 
+    # END; due to r";" hack
+    "END;": {
+        "pattern": r"END\s*;",
+        "action": lambda lines: lines  # Maintain original content
+    },
     # END-EXEC for COBOL Compatibility
     "END-EXEC;": {
-        "pattern": r"END-EXEC;",
-        "action": lambda lines: [lines[0].strip()]  # Single-line statement
+        "pattern": r"END-EXEC\s*;",
+        "action": lambda lines: lines  # Maintain original content
     }
 }
diff --git a/x.lnk b/x.lnk
new file mode 100644
index 0000000..343ba0b
Binary files /dev/null and b/x.lnk differ
